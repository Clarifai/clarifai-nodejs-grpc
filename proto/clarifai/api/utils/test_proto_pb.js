// source: proto/clarifai/api/utils/test_proto.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var proto_clarifai_api_utils_extensions_pb = require('../../../../proto/clarifai/api/utils/extensions_pb.js');
goog.object.extend(proto, proto_clarifai_api_utils_extensions_pb);
goog.exportSymbol('proto.clarifai.api.utils.TestProto', null, global);
goog.exportSymbol('proto.clarifai.api.utils.TestProto.OneOfFieldCase', null, global);
goog.exportSymbol('proto.clarifai.api.utils.TestProto2', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clarifai.api.utils.TestProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.clarifai.api.utils.TestProto.oneofGroups_);
};
goog.inherits(proto.clarifai.api.utils.TestProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clarifai.api.utils.TestProto.displayName = 'proto.clarifai.api.utils.TestProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clarifai.api.utils.TestProto2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clarifai.api.utils.TestProto2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clarifai.api.utils.TestProto2.displayName = 'proto.clarifai.api.utils.TestProto2';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.clarifai.api.utils.TestProto.oneofGroups_ = [[5,6,7]];

/**
 * @enum {number}
 */
proto.clarifai.api.utils.TestProto.OneOfFieldCase = {
  ONE_OF_FIELD_NOT_SET: 0,
  STRING_ONEOF: 5,
  BOOL_ONEOF: 6,
  MESSAGE_ONEOF: 7
};

/**
 * @return {proto.clarifai.api.utils.TestProto.OneOfFieldCase}
 */
proto.clarifai.api.utils.TestProto.prototype.getOneOfFieldCase = function() {
  return /** @type {proto.clarifai.api.utils.TestProto.OneOfFieldCase} */(jspb.Message.computeOneofCase(this, proto.clarifai.api.utils.TestProto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clarifai.api.utils.TestProto.prototype.toObject = function(opt_includeInstance) {
  return proto.clarifai.api.utils.TestProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clarifai.api.utils.TestProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clarifai.api.utils.TestProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    imageBytes: msg.getImageBytes_asB64(),
    stringOneof: jspb.Message.getFieldWithDefault(msg, 5, ""),
    boolOneof: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    messageOneof: (f = msg.getMessageOneof()) && proto.clarifai.api.utils.TestProto2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clarifai.api.utils.TestProto}
 */
proto.clarifai.api.utils.TestProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clarifai.api.utils.TestProto;
  return proto.clarifai.api.utils.TestProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clarifai.api.utils.TestProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clarifai.api.utils.TestProto}
 */
proto.clarifai.api.utils.TestProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImageBytes(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringOneof(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolOneof(value);
      break;
    case 7:
      var value = new proto.clarifai.api.utils.TestProto2;
      reader.readMessage(value,proto.clarifai.api.utils.TestProto2.deserializeBinaryFromReader);
      msg.setMessageOneof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clarifai.api.utils.TestProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clarifai.api.utils.TestProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clarifai.api.utils.TestProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clarifai.api.utils.TestProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getImageBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getMessageOneof();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.clarifai.api.utils.TestProto2.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.clarifai.api.utils.TestProto.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clarifai.api.utils.TestProto} returns this
 */
proto.clarifai.api.utils.TestProto.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.clarifai.api.utils.TestProto.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clarifai.api.utils.TestProto} returns this
 */
proto.clarifai.api.utils.TestProto.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double value = 3;
 * @return {number}
 */
proto.clarifai.api.utils.TestProto.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.clarifai.api.utils.TestProto} returns this
 */
proto.clarifai.api.utils.TestProto.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional bytes image_bytes = 4;
 * @return {!(string|Uint8Array)}
 */
proto.clarifai.api.utils.TestProto.prototype.getImageBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes image_bytes = 4;
 * This is a type-conversion wrapper around `getImageBytes()`
 * @return {string}
 */
proto.clarifai.api.utils.TestProto.prototype.getImageBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImageBytes()));
};


/**
 * optional bytes image_bytes = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImageBytes()`
 * @return {!Uint8Array}
 */
proto.clarifai.api.utils.TestProto.prototype.getImageBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImageBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clarifai.api.utils.TestProto} returns this
 */
proto.clarifai.api.utils.TestProto.prototype.setImageBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string string_oneof = 5;
 * @return {string}
 */
proto.clarifai.api.utils.TestProto.prototype.getStringOneof = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.clarifai.api.utils.TestProto} returns this
 */
proto.clarifai.api.utils.TestProto.prototype.setStringOneof = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.clarifai.api.utils.TestProto.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.clarifai.api.utils.TestProto} returns this
 */
proto.clarifai.api.utils.TestProto.prototype.clearStringOneof = function() {
  return jspb.Message.setOneofField(this, 5, proto.clarifai.api.utils.TestProto.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clarifai.api.utils.TestProto.prototype.hasStringOneof = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool bool_oneof = 6;
 * @return {boolean}
 */
proto.clarifai.api.utils.TestProto.prototype.getBoolOneof = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clarifai.api.utils.TestProto} returns this
 */
proto.clarifai.api.utils.TestProto.prototype.setBoolOneof = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.clarifai.api.utils.TestProto.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.clarifai.api.utils.TestProto} returns this
 */
proto.clarifai.api.utils.TestProto.prototype.clearBoolOneof = function() {
  return jspb.Message.setOneofField(this, 6, proto.clarifai.api.utils.TestProto.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clarifai.api.utils.TestProto.prototype.hasBoolOneof = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TestProto2 message_oneof = 7;
 * @return {?proto.clarifai.api.utils.TestProto2}
 */
proto.clarifai.api.utils.TestProto.prototype.getMessageOneof = function() {
  return /** @type{?proto.clarifai.api.utils.TestProto2} */ (
    jspb.Message.getWrapperField(this, proto.clarifai.api.utils.TestProto2, 7));
};


/**
 * @param {?proto.clarifai.api.utils.TestProto2|undefined} value
 * @return {!proto.clarifai.api.utils.TestProto} returns this
*/
proto.clarifai.api.utils.TestProto.prototype.setMessageOneof = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.clarifai.api.utils.TestProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clarifai.api.utils.TestProto} returns this
 */
proto.clarifai.api.utils.TestProto.prototype.clearMessageOneof = function() {
  return this.setMessageOneof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clarifai.api.utils.TestProto.prototype.hasMessageOneof = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clarifai.api.utils.TestProto2.prototype.toObject = function(opt_includeInstance) {
  return proto.clarifai.api.utils.TestProto2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clarifai.api.utils.TestProto2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clarifai.api.utils.TestProto2.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    flip: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clarifai.api.utils.TestProto2}
 */
proto.clarifai.api.utils.TestProto2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clarifai.api.utils.TestProto2;
  return proto.clarifai.api.utils.TestProto2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clarifai.api.utils.TestProto2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clarifai.api.utils.TestProto2}
 */
proto.clarifai.api.utils.TestProto2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFlip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clarifai.api.utils.TestProto2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clarifai.api.utils.TestProto2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clarifai.api.utils.TestProto2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clarifai.api.utils.TestProto2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFlip();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.clarifai.api.utils.TestProto2.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clarifai.api.utils.TestProto2} returns this
 */
proto.clarifai.api.utils.TestProto2.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool flip = 2;
 * @return {boolean}
 */
proto.clarifai.api.utils.TestProto2.prototype.getFlip = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clarifai.api.utils.TestProto2} returns this
 */
proto.clarifai.api.utils.TestProto2.prototype.setFlip = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


goog.object.extend(exports, proto.clarifai.api.utils);
